
-- todo: !!! This script is NOT up to date! See sqliteDatebase_IOTZOO.txt for the current database schema and adapt it for Postgres !!!


-- DROP DATABASE IF EXISTS IotZoo;

--CREATE DATABASE IotZoo
--    WITH
--    OWNER = postgres
--    ENCODING = 'UTF8'
--    LC_COLLATE = 'German_Germany.1252'
--    LC_CTYPE = 'German_Germany.1252'
--    TABLESPACE = pg_default
--    CONNECTION LIMIT = -1
--    IS_TEMPLATE = False;

DROP SCHEMA IF EXISTS cfg CASCADE;
create schema cfg;

DROP SCHEMA IF EXISTS th CASCADE;
create schema th;


---------------------------------------------------------------------------------------------------
-- table 001 cfg.microcontroller
---------------------------------------------------------------------------------------------------

create table if not exists cfg.microcontroller
(
  -- primary key
  microcontroller_id int generated by default as identity,
  mac_address character varying(30) not null,
  description character varying(1000) null,
  boot_datetime datetime null,
  constraint pk_microcontroller primary key (microcontroller_id),
  constraint uk_microcontroller unique (mac_address)
);

---------------------------------------------------------------------------------------------------
-- table 002 external_device_function
-- Explains the meaning of the external_device_function_id
---------------------------------------------------------------------------------------------------

create table if not exists external_device_function
(
  -- primary key
  external_device_function_id integer primary key,
  description character varying(500) not null
);

insert into external_device_function (external_device_function_id, description) values (0, 'Turn on light');
insert into external_device_function (external_device_function_id, description) values (1, 'Turn off light');
insert into external_device_function (external_device_function_id, description) values (2, 'Make light brighter');
insert into external_device_function (external_device_function_id, description) values (3, 'Make light darker');
insert into external_device_function (external_device_function_id, description) values (4, 'Light color cold white');
insert into external_device_function (external_device_function_id, description) values (5, 'Light color warm white');

---------------------------------------------------------------------------------------------------
-- table 003 cfg.known_topic
-- known_topics can have additional properties
---------------------------------------------------------------------------------------------------

create table if not exists cfg.known_topic
(
  -- primary key
  known_topic_id int generated by default as identity,
  topic character varying(1000) not null,
  -- can be for example a philips hue LightId
  external_device_id character varying(30) null,
  external_device_function_id integer null,
  description character varying(1000) not null,
  keep_history bool null,
  -- true, if the message is retained on the broker
  retained boolean,
  constraint pk_known_topic primary key (known_topic_id),
  constraint uk_known_topic unique (topic),
  constraint fk_known_topic foreign key (external_device_function_id) references external_device_function (external_device_function_id)
);

---------------------------------------------------------------------------------------------------
-- table 004 cft. rule_trigger_condition
---------------------------------------------------------------------------------------------------
create table if not exists cfg.rule_trigger_condition
(
  -- primary key
  rule_trigger_condition_id int,
  description character varying(100) not null,
  constraint pk_rule_trigger_condition primary key (rule_trigger_condition_id)
);

insert into cfg.rule_trigger_condition(rule_trigger_condition_id, description) values (0, 'always');
insert into cfg.rule_trigger_condition(rule_trigger_condition_id, description) values (1, 'only on source payload changed');
insert into cfg.rule_trigger_condition(rule_trigger_condition_id, description) values (2, 'after timer [ms] elapsed');


---------------------------------------------------------------------------------------------------
-- table 005 cfg.rule
---------------------------------------------------------------------------------------------------

create table if not exists cfg.rule
(
  -- primary key
  rule_id int generated by default as identity,
  -- topic which triggers the rule.
  source_topic   character varying(200) not null,
  -- topic which depends on the rule result. if the expression is validated to true, than the topic will be published with success_value.
  target_topic   character varying(200) not null,
  -- function to be applied on the source payload
  --payload_function character varying(2000) null,
  -- the expression to be validated.
  expression     character varying(1000) not null,
  -- value to publish after successfully validated.
  target_payload character varying(40) not null,
  -- true, if the expression can be interpreted/is logical.
  is_valid       boolean,
  -- 0 = most important
  priority       int default 100,
  -- 
  trigger_condition int,
  delay_ms int null, -- on trigger_condition 'after timer [ms] elapsed (2)'.
  --
  enabled boolean not null default true,
  constraint pk_rule primary key (rule_id),
  constraint fk_rule_trigger_condition foreign key (trigger_condition) references cfg.rule_trigger_condition (rule_trigger_condition_id),
  constraint uk_rule unique (target_topic, expression)
);


insert into cfg.rule (source_topic, target_topic, expression, target_payload, trigger_condition) values ('sensor/temperature/0001', 'traffic_light/0001', 'input1 <= 22', 'green', 0);
insert into cfg.rule (source_topic, target_topic, expression, target_payload, trigger_condition) values ('sensor/temperature/0001', 'traffic_light/0001', 'input1 > 22', 'yellow', 0);
insert into cfg.rule (source_topic, target_topic, expression, target_payload, trigger_condition) values ('sensor/temperature/0001', 'traffic_light/0001', 'input1 > 26', 'red', 0);

insert into cfg.rule (source_topic, target_topic, expression, target_payload, trigger_condition) values ('sensor/temperature/0001', 'traffic_light/0002', 'input1 <= 23', 'green', 0);
insert into cfg.rule (source_topic, target_topic, expression, target_payload, trigger_condition) values ('sensor/temperature/0001', 'traffic_light/0002', 'input1 > 23', 'yellow', 0);
insert into cfg.rule (source_topic, target_topic, expression, target_payload, trigger_condition) values ('sensor/temperature/0001', 'traffic_light/0002', 'input1 > 26', 'red', 0);

insert into cfg.rule (source_topic, target_topic, expression, target_payload, trigger_condition) values ('sensor/temperature/0001', 'switch/0001', 'input1 > 24', 'on', 1);
insert into cfg.rule (source_topic, target_topic, expression, target_payload, trigger_condition, delay_ms) values ('switch/0001', 'switch/0002', 'on', 'off', 2, 1500);




---------------------------------------------------------------------------------------------------
--  table 010 setting
---------------------------------------------------------------------------------------------------
create table if not exists cfg.setting
(
  setting_id int generated by default as identity,
  category character varying(50) not null,
  setting_key character varying(50) not null,
  setting_value character varying(1000) null,
    constraint uk_setting unique (category, setting_key)
);

insert into cfg.setting(category, setting_key, setting_value) values ('Location', 'Latitude', '52.6');
insert into cfg.setting(category, setting_key, setting_value) values ('Location', 'Longitude', '9.6');

insert into cfg.setting(category, setting_key, setting_value) values ('MqttBrokerSettings', 'UseInternalMqttBroker', 'true');
insert into cfg.setting(category, setting_key, setting_value) values ('MqttBrokerSettings', 'MqttBrokerIp', '85.215.224.44');





---------------------------------------------------------------------------------------------------
--  table 01 topic_history
---------------------------------------------------------------------------------------------------
create table th.topic_history
(
  topic_history_id int generated by default as identity,
  topic character varying(1000) not null,
  payload character varying(10000),
  date_received date default CURRENT_DATE
);