@page "/HowDoRulesWork"

@using DataAccess.Services

@inherits HowDoRulesWorkPageBase

<br />
<MudText><b>Rules</b> are at the core of IOTZOO.</MudText>
<br />
<MudText><b>Source Topic: </b>Topic which may trigger the Rule dependent on the Expession.</MudText>
<br />
<MudText><b>Target Topic: </b>Topic which is published if the rule fires.</MudText>
<br />
<MudText><b>Expression: </b> Condition that must be met for the rule to be executed. If no condition is specified, the rule is always executed as soon as the corresponding topic is received. You can see the exression as a context based filtering.</MudText>
<br />
<MudText>The following operators are supported:</MudText>
<br />
<MudText>smaller than: <b>&lt;</b></MudText>
<MudText>smaller than or equal: <b>&lt;=</b></MudText>
<MudStack Row="true">
   <MudText>equal: <b>==</b></MudText>
   <MudText>Example for text comparison: 'Iot' == 'input'.</MudText>
   <MudText>Example for number comparison: 3.14 == input.</MudText>
</MudStack>
<MudText>greater than: <b>&gt</b></MudText>
<MudText>greater than or equal: <b>&gt=</b></MudText>
<MudText>not the same: <b>&lt;&gt;</b> or <b>!=</b></MudText>
<MudText>modulo: <b>%</b></MudText>
<br />
<MudText>You can also specify an expression in json format instead of working with input.</MudText>
<br />
<MudText>{ "Operator": "&lt;", "Value": "70"}</MudText>
<MudText>{ "Operator": "&lt;=;", "Value": "70"}</MudText>
<MudText>{ "Operator": "==", "Value": "70"}</MudText>
<MudText>{ "Operator": "&gt;", "Value": "70"}</MudText>
<MudText>{ "Operator": "&gt=", "Value": "70"}</MudText>
<MudStack Row="true">
   <MudText>{ "Operator": "&lt;&gt;", "Value": "70"}</MudText><MudText>synonymous { "Operator": "!=", "Value": "70"}</MudText>
</MudStack>
<MudText>{ "Operator": "%", "Value": "70"}</MudText>
<MudText>{ "Operator": "contains", "Value": "IoT"}</MudText>
<MudText>{ "Operator": "contains not", "Value": "Zoo"}</MudText>
<br />
<div style="width:450px">
   <MudAlert Severity="Severity.Info">
      Capitalization plays a role in the comparison of text!
   </MudAlert>
</div>

<br />
<br />
<MudText>The <b>Target Payload</b> of a message can be applied to the expression/condition. In the simplest case, you can use the placeholder <b>input</b> which will be replaced by the payload of the message. The <b>Target Payload</b> is the content of the message.</MudText>
<MudText>Example: input &lt; 10. The rule is therefore only executed if the payload contains a value &lt; 10, e.g. 8.</MudText>
<br />
<MudText>Replacing <b>input</b> with the payload only works if the payload is a simple string or a number. If the payload is a json structure, you dann access the properties in this way:</MudText>
<MudText>Let us assume, that we have the following Payload in JSON notation: {"tempC": "31.4", "tempF": "597.2"}</MudText>
<MudText>The expression $['tempC'] > 25 ensures that the TargetTopic is only triggered if the property tempC has a value > 25.</MudText>
<MudText>In other words: You can use JSONPath to extract a value from JSON.</MudText>
<br />
<MudLink Href="https://jsonpath.com/">JSONPath Online Evaluator</MudLink>
<br />
<br />
<MudText>You can make the triggering of a Topic dependent on other topics. The Read("&lt;TopicName&gt") function can be used to read the value of a known topic.</MudText>
<MudText>The expression Read("Button1State") == 1 means that the TargetTopic is only triggered if the Topic Button1State was sent with Payload 1.</MudText>
<br />
<MudText>You can also combine serveral validations like input >= 0 && Read("Button1State") == 0</MudText>
<br />